import sublist3r
import requests
import os
import sys

# the other script is fine but as things get more complex
# it is better to isolate specific tasks into functions

# start reading it at the bottom

def get_domains_from_argv():
    # sys.argv is a list of the command line arguments
    # the first element is the script name, e.g. sub_test.py
    # refuse to run without at least one domain
    if len(sys.argv) < 2:
        print "Error: expected domain(s), e.g.:"
        print "python", sys.argv[0], "example.com anotherexample.com"
        exit(1)

    # discard first element (script name) - the rest are our domains
    domains = sys.argv[1:]
    return domains

def create_data_dir(domain):
    # first check that data dir exists
    if not os.path.isdir("data"):
        # if not, create it
        os.mkdir(os.path.join("data"))
    # use path.join to use correct path separator per OS: \ for windows and / for normal OSes
    data_dir = os.path.join("data", domain)
    # create data/$domain subdirectory
    if not os.path.isdir(data_dir):
        os.mkdir(data_dir)
    else:
        # warn that we are probably overwriting data
        print "Warning: data directory", data_dir, "already exists"
    return data_dir

def discover_subdomains(domain, data_dir):
    print "Running sublist3r for:", domain;
    # path to sublister file. anything that is repeated goes into a variable, we don't like to repeat ourselves
    sublist3er_file = os.path.join(data_dir, 'discovered_subdomains.txt')
    # get subdomains
    sublist3r.main(domain, 10,sublist3er_file, ports= None, silent=True, verbose= False, enable_bruteforce= False, engines=None)

    domains = [domain] # now includes base domain 
    # get subdomains from file
    with open(sublist3er_file) as infile:
        for line in infile:
            # Skip empty lines generated by Sublist3r
            if not line.strip():
                continue
            domains.append(line.rstrip())

    print "Discovered subdomains:", " ".join(domains)
    print "Discovered subdomains saved to:", sublist3er_file
    return domains

# creates http and https URLs for each subdomain passed
def create_url_list_from_subdomains(subdomains):
    # start with the base domains http and https URLs
    urls = []
    for subdomain in subdomains:
        urls.append("http://" + subdomain + "/")
        urls.append("https://" + subdomain + "/")
    return urls

# make request module's response object into string of url + status code
def stringify_response(response):
    return response.url + " " + str(response.status_code)

# request URLs and report status code and redirect chains
def request_urls(urls, data_dir):
    subdomain_responses_file = os.path.join(data_dir, 'subdomain_responses.txt')
    with open(subdomain_responses_file, 'w') as outfile:
        # request each URL and output status code and redirect chains
        for url in urls:
            try:
                response = requests.get(url, timeout=5)
                # record all redirect urls and status codes into a list
                redirect_chain = []
                if len(response.history) > 0:
                    for history in response.history:
                        # made stringify_response into a function since it is used twice
                        # arguably this is overkill
                        redirect_chain.append(stringify_response(history))
                # final destination
                redirect_chain.append(stringify_response(response))
                # make redirect_chain list into a string joined with " -> "
                # (if redirect_chain only has one item, no " -> " is inserted)
                outline = " -> ".join(redirect_chain)
                # print to console and write to file
                print outline
                outfile.write(outline+"\n")
            except Exception as e:
                errline = url+" Connection Error: "+str(e)
                print errline
                outfile.write(errline +"\n")

    print "Subdomain responses saved to:", subdomain_responses_file
    print "  ---- "

# main body
def main():
    # get domains from command line arguments or exit if none passed
    domains = get_domains_from_argv()
    # enumerate each domain
    for domain in domains:
        # create data dir.
        # we do this here because we need it both in discover_subdomains and request_urls
        # so we pass it into both as a function argument
        data_dir = create_data_dir(domain)
        # get subdomains from sublisted. now includes base domain as well.
        subdomains = discover_subdomains(domain, data_dir)
        urls = create_url_list_from_subdomains(subdomains)
        request_urls(urls, data_dir)

main()
