import sublist3r
import requests
import os
import sys

# sys.argv is a list of the command line arguments
# the first element is the script name, e.g. sub_test.py

# refuse to run without at least one domain
if len(sys.argv) < 2:
    print("Error: expected domain(s), e.g.:")
    print("python", sys.argv[0], "example.com anotherexample.com")
    exit(1)

# discard first element (script name) - the rest are our domains
domains = sys.argv[1:]

for domain in domains:
	# first check that data/ exists
    if not os.path.isdir("data"):
        # if not, create it
        os.mkdir(os.path.join("data"))
	# use path.join to use correct path separator per OS: \ for windows and / for normal OSes
    data_dir = os.path.join("data", domain)
	# create data/$domain subdirectory
    if not os.path.isdir(data_dir):
        os.mkdir(data_dir)
    else:
        # warn that we are probably overwriting data
        print("Warning: data directory", data_dir, "already exists")

    print("Running sublist3r for:", domain)

    # get subdomains
    sublist3r_file = os.path.join(data_dir, 'discovered_subdomains.txt')
    subdomains = sublist3r.main(domain, 10,sublist3r_file, ports= None, silent=True, verbose= False, enable_bruteforce= False, engines=None)

    # start with the base domains http and https URLs
    urls = ["http://" + domain + "/", "https://" + domain + "/"]
    # add http and https URLs for each subdomain
    with open(sublist3r_file) as infile:
        for line in infile:
            if not line.strip(): continue  	# Skip empty lines generated by Sublist3r
            urls.append("http://" + line.rstrip() + "/")  	# Write non-empty lines to output. Once with HTTP protocol...
            urls.append("https://" + line.rstrip() + "/") 	# ... and once with HTTPS protocol

    # request each URL and output status code and redirect chains
    subdomain_responses_file = os.path.join(data_dir, 'subdomain_responses.txt')
    with open(subdomain_responses_file, 'w') as outfile:
        for url in urls:
            try:
                response = requests.get(url, timeout=5)
                redirect_chain = []
                if len(response.history) > 0:
                    for history in response.history:
                        redirect_chain.append(history.url + " " + str(history.status_code))
                redirect_chain.append(response.url + " " + str(response.status_code))
                outline = " -> ".join(redirect_chain) 	# make redirect_chain into a string joined with " -> "
                print(outline)
                outfile.write(outline+"\n")
            except requests.ConnectionError as e:
                errline = url+" Connection Error"
                print(errline)
                outfile.write(errline +"\n")

    print("Found subdomains is in:", sublist3r_file)
    print("Subdomain responses are in:", subdomain_responses_file)
    print("  ---- ")